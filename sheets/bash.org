#+TITLE: Bash scripting
#+COMMAND: bash
#+CATEGORY: CLI
#+SOURCE: https://github.com/rstacruz/cheatsheets/blob/master/bash.md

* Example
  :PROPERTIES:
  :CUSTOM_ID: example
  :END:

#+BEGIN_SRC sh
  #!/usr/bin/env bash

  NAME="John"
  echo "Hello $NAME!"
#+END_SRC

* Variables
  :PROPERTIES:
  :CUSTOM_ID: variables
  :END:

#+BEGIN_SRC sh
  NAME="John"
  echo $NAME
  echo "$NAME"
  echo "${NAME}!"
#+END_SRC

* String quotes
  :PROPERTIES:
  :CUSTOM_ID: string-quotes
  :END:

#+BEGIN_SRC sh
  NAME="John"
  echo "Hi $NAME"  #=> Hi John
  echo 'Hi $NAME'  #=> Hi $NAME
#+END_SRC

* Shell execution
  :PROPERTIES:
  :CUSTOM_ID: shell-execution
  :END:

#+BEGIN_SRC sh
  echo "I'm in $(pwd)"
  echo "I'm in `pwd`"
  # Same
#+END_SRC

See [[http://wiki.bash-hackers.org/syntax/expansion/cmdsubst][Command
substitution]]

* Conditional execution
  :PROPERTIES:
  :CUSTOM_ID: conditional-execution
  :END:

#+BEGIN_SRC sh
  git commit && git push
  git commit || echo "Commit failed"
#+END_SRC

* Functions
  :PROPERTIES:
  :CUSTOM_ID: functions
  :END:

#+BEGIN_SRC sh
  get_name() {
    echo "John"
  }

  echo "You are $(get_name)"
#+END_SRC

See: [[#functions][Functions]]

* Conditionals
  :PROPERTIES:
  :CUSTOM_ID: conditionals
  :END:

#+BEGIN_SRC sh
  if [[ -z "$string" ]]; then
    echo "String is empty"
  elif [[ -n "$string" ]]; then
    echo "String is not empty"
  fi
#+END_SRC

See: [[#conditionals][Conditionals]]

* Strict mode
  :PROPERTIES:
  :CUSTOM_ID: strict-mode
  :END:

#+BEGIN_SRC sh
  set -euo pipefail
  IFS=$'\n\t'
#+END_SRC

See:
[[http://redsymbol.net/articles/unofficial-bash-strict-mode/][Unofficial
bash strict mode]]

* Brace expansion
  :PROPERTIES:
  :CUSTOM_ID: brace-expansion
  :END:

#+BEGIN_SRC sh
  echo {A,B}.js
#+END_SRC

#+BEGIN_VERSE
  ={A,B}= | Same as =A B= |
  ={A,B}.js= | Same as =A.js B.js= |
  ={1..5}= | Same as =1 2 3 4 5= |
#+END_VERSE

See: [[http://wiki.bash-hackers.org/syntax/expansion/brace][Brace
expansion]]

* Basics
  :PROPERTIES:
  :CUSTOM_ID: basics
  :END:

#+BEGIN_SRC sh
  name="John"
  echo ${name}
  echo ${name/J/j}    #=> "john" (substitution)
  echo ${name:0:2}    #=> "Jo" (slicing)
  echo ${name::2}     #=> "Jo" (slicing)
  echo ${name::-1}    #=> "Joh" (slicing)
  echo ${name:(-1)}   #=> "n" (slicing from right)
  echo ${name:(-2):1} #=> "h" (slicing from right)
  echo ${food:-Cake}  #=> $food or "Cake"
#+END_SRC

#+BEGIN_SRC sh
  length=2
  echo ${name:0:length}  #=> "Jo"
#+END_SRC

See: [[http://wiki.bash-hackers.org/syntax/pe][Parameter expansion]]

#+BEGIN_SRC sh
  STR="/path/to/foo.cpp"
  echo ${STR%.cpp}    # /path/to/foo
  echo ${STR%.cpp}.o  # /path/to/foo.o

  echo ${STR##*.}     # cpp (extension)
  echo ${STR##*/}     # foo.cpp (basepath)

  echo ${STR#*/}      # path/to/foo.cpp
  echo ${STR##*/}     # foo.cpp

  echo ${STR/foo/bar} # /path/to/bar.cpp
#+END_SRC

#+BEGIN_SRC sh
  STR="Hello world"
  echo ${STR:6:5}   # "world"
  echo ${STR:-5:5}  # "world"
#+END_SRC

#+BEGIN_SRC sh
  SRC="/path/to/foo.cpp"
  BASE=${SRC##*/}   #=> "foo.cpp" (basepath)
  DIR=${SRC%$BASE}  #=> "/path/to/" (dirpath)
#+END_SRC

* Substitution
  :PROPERTIES:
  :CUSTOM_ID: substitution
  :END:

| Code                | Description           |
|---------------------+-----------------------|
| =${FOO%suffix}=     | Remove suffix         |
| =${FOO#prefix}=     | Remove prefix         |
| ---                 | ---                   |
| =${FOO%%suffix}=    | Remove long suffix    |
| =${FOO##prefix}=    | Remove long prefix    |
| ---                 | ---                   |
| =${FOO/from/to}=    | Replace first match   |
| =${FOO//from/to}=   | Replace all           |
| ---                 | ---                   |
| =${FOO/%from/to}=   | Replace suffix        |
| =${FOO/#from/to}=   | Replace prefix        |

* Comments
  :PROPERTIES:
  :CUSTOM_ID: comments
  :END:

#+BEGIN_SRC sh
  # Single line comment
#+END_SRC

#+BEGIN_SRC sh
  : '
  This is a
  multi line
  comment
  '
#+END_SRC

* Substrings
  :PROPERTIES:
  :CUSTOM_ID: substrings
  :END:

#+BEGIN_VERSE
  =${FOO:0:3}= | Substring /(position, length)/ |
  =${FOO:-3:3}= | Substring from the right |
#+END_VERSE

* Length
  :PROPERTIES:
  :CUSTOM_ID: length
  :END:

#+BEGIN_VERSE
  =${#FOO}= | Length of =$FOO= |
#+END_VERSE

* Manipulation
  :PROPERTIES:
  :CUSTOM_ID: manipulation
  :END:

#+BEGIN_SRC sh
  STR="HELLO WORLD!"
  echo ${STR,}   #=> "hELLO WORLD!" (lowercase 1st letter)
  echo ${STR,,}  #=> "hello world!" (all lowercase)

  STR="hello world!"
  echo ${STR^}   #=> "Hello world!" (uppercase 1st letter)
  echo ${STR^^}  #=> "HELLO WORLD!" (all uppercase)
#+END_SRC

* Default values
  :PROPERTIES:
  :CUSTOM_ID: default-values
  :END:

#+BEGIN_VERSE
  =${FOO:-val}= | =$FOO=, or =val= if not set |
  =${FOO:=val}= | Set =$FOO= to =val= if not set |
  =${FOO:+val}= | =val= if =$FOO= is set |
  =${FOO:?message}= | Show error message and exit if =$FOO= is not set |
#+END_VERSE

The =:= is optional (eg, =${FOO=word}= works)

* Basic for loop
  :PROPERTIES:
  :CUSTOM_ID: basic-for-loop
  :END:

#+BEGIN_SRC sh
  for i in /etc/rc.*; do
    echo $i
  done
#+END_SRC

* C-like for loop
  :PROPERTIES:
  :CUSTOM_ID: c-like-for-loop
  :END:

#+BEGIN_SRC sh
  for ((i = 0 ; i < 100 ; i++)); do
    echo $i
  done
#+END_SRC

* Ranges
  :PROPERTIES:
  :CUSTOM_ID: ranges
  :END:

#+BEGIN_SRC sh
  for i in {1..5}; do
      echo "Welcome $i"
  done
#+END_SRC

** With step size
   :PROPERTIES:
   :CUSTOM_ID: with-step-size
   :END:

#+BEGIN_SRC sh
  for i in {5..50..5}; do
      echo "Welcome $i"
  done
#+END_SRC

* Reading lines
  :PROPERTIES:
  :CUSTOM_ID: reading-lines
  :END:

#+BEGIN_SRC sh
  < file.txt | while read line; do
    echo $line
  done
#+END_SRC

* Forever
  :PROPERTIES:
  :CUSTOM_ID: forever
  :END:

#+BEGIN_SRC sh
  while true; do
    ···
  done
#+END_SRC

* Defining functions
  :PROPERTIES:
  :CUSTOM_ID: defining-functions
  :END:

#+BEGIN_SRC sh
  myfunc() {
      echo "hello $1"
  }
#+END_SRC

#+BEGIN_SRC sh
  # Same as above (alternate syntax)
  function myfunc() {
      echo "hello $1"
  }
#+END_SRC

#+BEGIN_SRC sh
  myfunc "John"
#+END_SRC

* Returning values
  :PROPERTIES:
  :CUSTOM_ID: returning-values
  :END:

#+BEGIN_SRC sh
  myfunc() {
      local myresult='some value'
      echo $myresult
  }
#+END_SRC

#+BEGIN_SRC sh
  result="$(myfunc)"
#+END_SRC

* Raising errors
  :PROPERTIES:
  :CUSTOM_ID: raising-errors
  :END:

#+BEGIN_SRC sh
  myfunc() {
    return 1
  }
#+END_SRC

#+BEGIN_SRC sh
  if myfunc; then
    echo "success"
  else
    echo "failure"
  fi
#+END_SRC

* Arguments
  :PROPERTIES:
  :CUSTOM_ID: arguments
  :END:

| Expression   | Description                          |
|--------------+--------------------------------------|
| =$#=         | Number of arguments                  |
| =$*=         | All arguments                        |
| =$@=         | All arguments, starting from first   |
| =$1=         | First argument                       |

See
[[http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables][Special
parameters]].

* Conditions
  :PROPERTIES:
  :CUSTOM_ID: conditions
  :END:

Note that =[[= is actually a command/program that returns either =0=
(true) or =1= (false). Any program that obeys the same logic (like all
base utils, such as =grep(1)= or =ping(1)=) can be used as condition,
see examples.

| Condition                  | Description             |
|----------------------------+-------------------------|
| =[[ -z STRING ]]=          | Empty string            |
| =[[ -n STRING ]]=          | Not empty string        |
| =[[ STRING == STRING ]]=   | Equal                   |
| =[[ STRING != STRING ]]=   | Not Equal               |
| ---                        | ---                     |
| =[[ NUM -eq NUM ]]=        | Equal                   |
| =[[ NUM -ne NUM ]]=        | Not equal               |
| =[[ NUM -lt NUM ]]=        | Less than               |
| =[[ NUM -le NUM ]]=        | Less than or equal      |
| =[[ NUM -gt NUM ]]=        | Greater than            |
| =[[ NUM -ge NUM ]]=        | Greater than or equal   |
| ---                        | ---                     |
| =[[ STRING =~ STRING ]]=   | Regexp                  |
| ---                        | ---                     |
| =(( NUM < NUM ))=          | Numeric conditions      |

| Condition              | Description                |
|------------------------+----------------------------|
| =[[ -o noclobber ]]=   | If OPTIONNAME is enabled   |
| ---                    | ---                        |
| =[[ ! EXPR ]]=         | Not                        |
| =[[ X ]] && [[ Y ]]=   | And                        |
| =[[ X ]] || [[ Y ]]=   | Or                         |

* File conditions
  :PROPERTIES:
  :CUSTOM_ID: file-conditions
  :END:

| Condition                 | Description               |
|---------------------------+---------------------------|
| =[[ -e FILE ]]=           | Exists                    |
| =[[ -r FILE ]]=           | Readable                  |
| =[[ -h FILE ]]=           | Symlink                   |
| =[[ -d FILE ]]=           | Directory                 |
| =[[ -w FILE ]]=           | Writable                  |
| =[[ -s FILE ]]=           | Size is > 0 bytes         |
| =[[ -f FILE ]]=           | File                      |
| =[[ -x FILE ]]=           | Executable                |
| ---                       | ---                       |
| =[[ FILE1 -nt FILE2 ]]=   | 1 is more recent than 2   |
| =[[ FILE1 -ot FILE2 ]]=   | 2 is more recent than 1   |
| =[[ FILE1 -ef FILE2 ]]=   | Same files                |

* Example
  :PROPERTIES:
  :CUSTOM_ID: example-1
  :END:

#+BEGIN_SRC sh
  if ping -c 1 google.com; then
    echo "It appears you have a working internet connection"
  fi
#+END_SRC

#+BEGIN_SRC sh
  if grep -q 'foo' ~/.bash_history; then
    echo "You appear to have typed 'foo' in the past"
  fi
#+END_SRC

#+BEGIN_SRC sh
  # String
  if [[ -z "$string" ]]; then
    echo "String is empty"
  elif [[ -n "$string" ]]; then
    echo "String is not empty"
  fi
#+END_SRC

#+BEGIN_SRC sh
  # Combinations
  if [[ X ]] && [[ Y ]]; then
    ...
  fi
#+END_SRC

#+BEGIN_SRC sh
  # Equal
  if [[ "$A" == "$B" ]]
#+END_SRC

#+BEGIN_SRC sh
  # Regex
  if [[ "A" =~ "." ]]
#+END_SRC

#+BEGIN_SRC sh
  if (( $a < $b )); then
     echo "$a is smaller than $b"
  fi
#+END_SRC

#+BEGIN_SRC sh
  if [[ -e "file.txt" ]]; then
    echo "file exists"
  fi
#+END_SRC

* Defining arrays
  :PROPERTIES:
  :CUSTOM_ID: defining-arrays
  :END:

#+BEGIN_SRC sh
  Fruits=('Apple' 'Banana' 'Orange')
#+END_SRC

#+BEGIN_SRC sh
  Fruits[0]="Apple"
  Fruits[1]="Banana"
  Fruits[2]="Orange"
#+END_SRC

* Working with arrays
  :PROPERTIES:
  :CUSTOM_ID: working-with-arrays
  :END:

#+BEGIN_SRC sh
  echo ${Fruits[0]}           # Element #0
  echo ${Fruits[@]}           # All elements, space-separated
  echo ${#Fruits[@]}          # Number of elements
  echo ${#Fruits}             # String length of the 1st element
  echo ${#Fruits[3]}          # String length of the Nth element
  echo ${Fruits[@]:3:2}       # Range (from position 3, length 2)
#+END_SRC

* Operations
  :PROPERTIES:
  :CUSTOM_ID: operations
  :END:

#+BEGIN_SRC sh
  Fruits=("${Fruits[@]}" "Watermelon")    # Push
  Fruits+=('Watermelon')                  # Also Push
  Fruits=( ${Fruits[@]/Ap*/} )            # Remove by regex match
  unset Fruits[2]                         # Remove one item
  Fruits=("${Fruits[@]}")                 # Duplicate
  Fruits=("${Fruits[@]}" "${Veggies[@]}") # Concatenate
  lines=(`cat "logfile"`)                 # Read from file
#+END_SRC

* Iteration
  :PROPERTIES:
  :CUSTOM_ID: iteration
  :END:

#+BEGIN_SRC sh
  for i in "${arrayName[@]}"; do
    echo $i
  done
#+END_SRC

* Defining
  :PROPERTIES:
  :CUSTOM_ID: defining
  :END:

#+BEGIN_SRC sh
  declare -A sounds
#+END_SRC

#+BEGIN_SRC sh
  sounds[dog]="bark"
  sounds[cow]="moo"
  sounds[bird]="tweet"
  sounds[wolf]="howl"
#+END_SRC

Declares =sound= as a Dictionary object (aka associative array).

* Working with dictionaries
  :PROPERTIES:
  :CUSTOM_ID: working-with-dictionaries
  :END:

#+BEGIN_SRC sh
  echo ${sounds[dog]} # Dog's sound
  echo ${sounds[@]}   # All values
  echo ${!sounds[@]}  # All keys
  echo ${#sounds[@]}  # Number of elements
  unset sounds[dog]   # Delete dog
#+END_SRC

* Iteration
  :PROPERTIES:
  :CUSTOM_ID: iteration-1
  :END:

** Iterate over values
   :PROPERTIES:
   :CUSTOM_ID: iterate-over-values
   :END:

#+BEGIN_SRC sh
  for val in "${sounds[@]}"; do
    echo $val
  done
#+END_SRC

** Iterate over keys
   :PROPERTIES:
   :CUSTOM_ID: iterate-over-keys
   :END:

#+BEGIN_SRC sh
  for key in "${!sounds[@]}"; do
    echo $key
  done
#+END_SRC

* Options
  :PROPERTIES:
  :CUSTOM_ID: options-1
  :END:

#+BEGIN_SRC sh
  set -o noclobber  # Avoid overlay files (echo "hi" > foo)
  set -o errexit    # Used to exit upon error, avoiding cascading errors
  set -o pipefail   # Unveils hidden failures
  set -o nounset    # Exposes unset variables
#+END_SRC

* Glob options
  :PROPERTIES:
  :CUSTOM_ID: glob-options
  :END:

#+BEGIN_SRC sh
  set -o nullglob    # Non-matching globs are removed  ('*.foo' => '')
  set -o failglob    # Non-matching globs throw errors
  set -o nocaseglob  # Case insensitive globs
  set -o globdots    # Wildcards match dotfiles ("*.sh" => ".foo.sh")
  set -o globstar    # Allow ** for recursive matches ('lib/**/*.rb' => 'lib/a/b/c.rb')
#+END_SRC

Set =GLOBIGNORE= as a colon-separated list of patterns to be removed
from glob matches.

* Commands
  :PROPERTIES:
  :CUSTOM_ID: commands
  :END:

#+BEGIN_VERSE
  =history= | Show history |
  =shopt -s histverify= | Don't execute expanded result immediately |
#+END_VERSE

* Expansions
  :PROPERTIES:
  :CUSTOM_ID: expansions
  :END:

#+BEGIN_VERSE
  =!$= | Expand last parameter of most recent command |
  =!*= | Expand all parameters of most recent command |
  =!-n= | Expand =n=th most recent command |
  =!n= | Expand =n=th command in history |
  =!<command>= | Expand most recent invocation of command =<command>= |
#+END_VERSE

* Operations
  :PROPERTIES:
  :CUSTOM_ID: operations-1
  :END:

#+BEGIN_VERSE
  =!!= | Execute last command again |
  =!!:s/<FROM>/<TO>/= | Replace first occurrence of =<FROM>= to =<TO>= in most recent command |
  =!!:gs/<FROM>/<TO>/= | Replace all occurrences of =<FROM>= to =<TO>= in most recent command |
  =!$:t= | Expand only basename from last parameter of most recent command |
  =!$:h= | Expand only directory from last parameter of most recent command |
#+END_VERSE

=!!= and =!$= can be replaced with any valid expansion.

* Slices
  :PROPERTIES:
  :CUSTOM_ID: slices
  :END:

#+BEGIN_VERSE
  =!!:n= | Expand only =n=th token from most recent command (command is =0=; first argument is =1=) |
  =!^= | Expand first argument from most recent command |
  =!$= | Expand last token from most recent command |
  =!!:n-m= | Expand range of tokens from most recent command |
  =!!:n-$= | Expand =n=th token to last from most recent command |
#+END_VERSE

=!!= can be replaced with any valid expansion i.e. =!cat=, =!-2=, =!42=,
etc.

* Numeric calculations
  :PROPERTIES:
  :CUSTOM_ID: numeric-calculations
  :END:

#+BEGIN_SRC sh
  $((a + 200))      # Add 200 to $a
#+END_SRC

#+BEGIN_SRC sh
  $((RANDOM%=200))  # Random number 0..200
#+END_SRC

* Subshells
  :PROPERTIES:
  :CUSTOM_ID: subshells
  :END:

#+BEGIN_SRC sh
  (cd somedir; echo "I'm now in $PWD")
  pwd # still in first directory
#+END_SRC

* Redirection
  :PROPERTIES:
  :CUSTOM_ID: redirection
  :END:

#+BEGIN_SRC sh
  python hello.py > output.txt   # stdout to (file)
  python hello.py >> output.txt  # stdout to (file), append
  python hello.py 2> error.log   # stderr to (file)
  python hello.py 2>&1           # stderr to stdout
  python hello.py 2>/dev/null    # stderr to (null)
  python hello.py &>/dev/null    # stdout and stderr to (null)
#+END_SRC

#+BEGIN_SRC sh
  python hello.py < foo.txt      # feed foo.txt to stdin for python
#+END_SRC

* Inspecting commands
  :PROPERTIES:
  :CUSTOM_ID: inspecting-commands
  :END:

#+BEGIN_SRC sh
  command -V cd
  #=> "cd is a function/alias/whatever"
#+END_SRC

* Trap errors
  :PROPERTIES:
  :CUSTOM_ID: trap-errors
  :END:

#+BEGIN_SRC sh
  trap 'echo Error at about $LINENO' ERR
#+END_SRC

or

#+BEGIN_SRC sh
  traperr() {
    echo "ERROR: ${BASH_SOURCE[1]} at about ${BASH_LINENO[0]}"
  }

  set -o errtrace
  trap traperr ERR
#+END_SRC

* Case/switch
  :PROPERTIES:
  :CUSTOM_ID: caseswitch
  :END:

#+BEGIN_SRC sh
  case "$1" in
    start | up)
      vagrant up
      ;;

    *)
      echo "Usage: $0 {start|stop|ssh}"
      ;;
  esac
#+END_SRC

* Source relative
  :PROPERTIES:
  :CUSTOM_ID: source-relative
  :END:

#+BEGIN_SRC sh
  source "${0%/*}/../share/foo.sh"
#+END_SRC

* printf
  :PROPERTIES:
  :CUSTOM_ID: printf
  :END:

#+BEGIN_SRC sh
  printf "Hello %s, I'm %s" Sven Olga
  #=> "Hello Sven, I'm Olga
#+END_SRC

* Directory of script
  :PROPERTIES:
  :CUSTOM_ID: directory-of-script
  :END:

#+BEGIN_SRC sh
  DIR="${0%/*}"
#+END_SRC

* Getting options
  :PROPERTIES:
  :CUSTOM_ID: getting-options
  :END:

#+BEGIN_SRC sh
  while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
    -V | --version )
      echo $version
      exit
      ;;
    -s | --string )
      shift; string=$1
      ;;
    -f | --flag )
      flag=1
      ;;
  esac; shift; done
  if [[ "$1" == '--' ]]; then shift; fi
#+END_SRC

* Heredoc
  :PROPERTIES:
  :CUSTOM_ID: heredoc
  :END:

#+BEGIN_SRC sh
  cat <<END
  hello world
  END
#+END_SRC

* Reading input
  :PROPERTIES:
  :CUSTOM_ID: reading-input
  :END:

#+BEGIN_SRC sh
  echo -n "Proceed? [y/n]: "
  read ans
  echo $ans
#+END_SRC

#+BEGIN_SRC sh
  read -n 1 ans    # Just one character
#+END_SRC

* Special variables
  :PROPERTIES:
  :CUSTOM_ID: special-variables
  :END:

#+BEGIN_VERSE
  =$?= | Exit status of last task |
  =$!= | PID of last background task |
  =$$= | PID of shell |
#+END_VERSE

See
[[http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables][Special
parameters]].

* Go to previous directory
  :PROPERTIES:
  :CUSTOM_ID: go-to-previous-directory
  :END:

#+BEGIN_SRC sh
  pwd # /home/user/foo
  cd bar/
  pwd # /home/user/foo/bar
  cd -
  pwd # /home/user/foo
#+END_SRC
